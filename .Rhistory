setwd("~/Desktop/JWu_Projects/Committee_Work/O&I/Pay_Transparency")
source("code/00_load_dependencies.R")
indeed_df <- read.csv("data/output/Indeed_scrape_daily_compiliation.csv")
boros_df <- read.csv("data/output/Indeed_scrape_boros_compiliation.csv")
look <- (boros_df %>%
select(-date_scraped,-location,-post_date) %>%
do.call(paste0,.)) %in%
(indeed_df %>%
filter(strptime(date_scraped, "%m/%d/%Y %H:%M:%S") >= "2023-09-05 14:00:00 EDT") %>%
select(-date_scraped,-post_date) %>%
do.call(paste0, .)) %>% which()
boros_df %>%
slice(look) %>%
View()
indeed_df <- indeed_df %>%
mutate(salary_provided = ifelse(grepl("Estimated",salary_snippet) | is.na(salary_snippet),0,1), # Create new column for if salary provided
is_salary_range = ifelse(grepl("-",salary_snippet) & !is.na(salary_snippet),1,0), # Check if salary is a range
salary_type = ifelse(!is.na(salary_snippet),str_extract(salary_snippet,"[\\w]+$"),NA)
) %>%
rowwise() %>%
mutate(lower_salary = ifelse(is_salary_range,parse_number(str_extract_all(salary_snippet,"\\$([0-9,.]+)")[[1]][1]),NA), # Grab lower and upper salaries
upper_salary = ifelse(is_salary_range, parse_number(str_extract_all(salary_snippet,"\\$([0-9,.]+)")[[1]][2]),NA),
salary_diff = ifelse(salary_provided & is_salary_range, upper_salary - lower_salary, NA),
diff_perc_of_lower_salary = ifelse(!is.na(salary_diff),salary_diff/lower_salary,NA)
)
### EDA
# Table of salaries provided
table(indeed_df$salary_provided)
1307/11321
# How many posts are posted per hour?
indeed_df %>%
group_by(date_scraped) %>%
summarise(count = n()) %>%
slice(-1) %>%
ggplot(.,aes(x=date_scraped, y = count, group = 1)) +
geom_line() +
theme_nycc() +
scale_x_discrete(breaks = function(x){x[c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)]})+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Annual salary difference distribution
# Histogram overlaid with kernel density curve
ggplot(indeed_df %>%
filter(
salary_provided == 1), aes(x=diff_perc_of_lower_salary)) +
geom_histogram(aes(y=..density..),
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
# What are these jobs that have high ratios?
salary_year_diff_1 <- indeed_df %>%
filter(diff_perc_of_lower_salary > 1,
salary_provided == 1)
salary_year_diff_1 %>%
distinct(.keep_all = TRUE) %>%
select(job_title, company_name, salary_snippet, salary_diff, diff_perc_of_lower_salary) %>%
arrange(desc(diff_perc_of_lower_salary)) %>%
gt() %>%
gt_theme_nytimes() %>%
tab_header(
title = "Indeed Jobs",
subtitle = glue::glue("With salary ranges greater than their lower bound")
) %>%
fmt_currency(columns = salary_diff) %>%
fmt_percent(columns = diff_perc_of_lower_salary)
View(indeed_df)
View(boros_df)
test <- read.csv("~/Desktop/Indeed_scrape_boros_compiliation.csv")
View(test)
test <- read.csv("~/Desktop/test.csv")
View(test)
test <- read.csv("~/Desktop/test.csv")
test <- read.csv("~/Desktop/test.csv")
View(test)
getwd()
indeed_test_df <- read.csv("~/Desktop/Indeed_scrape_daily_compiliation.csv")
View(indeed_test_df)
bk_df <- read.csv("~/Desktop/Indeed_scrape_bk_compiliation.csv")
View(bk_df)
google_df <- read.csv("~/Desktop/google-jobs-cronjon.csv")
google_df <- read.csv("~/Desktop/google-jobs-cronjob.csv")
View(google_df)
google_df[60,5]
google_df[60,6]
View(indeed_test_df)
test <- read.csv("~/Desktop/test.csv")
View(test)
test %>% filter(company_name == "NYC Careers") %>% View()
indeed_df %>% filter(company_name == "NYC Careers") %>% View()
table(indeed_df$company_location)
# How many posts are posted per hour?
indeed_df %>%
group_by(date_scraped) %>%
summarise(count = n()) %>%
slice(-1) %>%
ggplot(.,aes(x=date_scraped, y = count, group = 1)) +
geom_line() +
theme_nycc() +
scale_x_discrete(breaks = function(x){x[c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)]})+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
salary_year_diff_1 %>%
distinct(.keep_all = TRUE) %>%
select(job_title, company_name, salary_snippet, salary_diff, diff_perc_of_lower_salary) %>%
arrange(desc(diff_perc_of_lower_salary)) %>%
gt() %>%
gt_theme_nytimes() %>%
tab_header(
title = "Indeed Jobs",
subtitle = glue::glue("With salary ranges greater than their lower bound")
) %>%
fmt_currency(columns = salary_diff) %>%
fmt_percent(columns = diff_perc_of_lower_salary)
rm(list-ls())
rm(list=ls())
source("code/00_load_dependencies.R")
indeed_df <- read.csv("data/output/Indeed_scrape_daily_compiliation.csv")
indeed_df <- indeed_df %>%
mutate(salary_provided = ifelse(grepl("Estimated",salary_snippet) | is.na(salary_snippet),0,1), # Create new column for if salary provided
is_salary_range = ifelse(grepl("-",salary_snippet) & !is.na(salary_snippet),1,0), # Check if salary is a range
salary_type = ifelse(!is.na(salary_snippet),str_extract(salary_snippet,"[\\w]+$"),NA)
) %>%
rowwise() %>%
mutate(lower_salary = ifelse(is_salary_range,parse_number(str_extract_all(salary_snippet,"\\$([0-9,.]+)")[[1]][1]),NA), # Grab lower and upper salaries
upper_salary = ifelse(is_salary_range, parse_number(str_extract_all(salary_snippet,"\\$([0-9,.]+)")[[1]][2]),NA),
salary_diff = ifelse(salary_provided & is_salary_range, upper_salary - lower_salary, NA),
salary_ratio = ifelse(!is.na(salary_diff),upper_salary/lower_salary,NA)
)
### EDA
# Table of salaries provided
table(indeed_df$salary_provided)/nrow(indeed_df)
# How many posts are posted per hour?
indeed_df %>%
group_by(date_scraped) %>%
summarise(count = n()) %>%
slice(-1) %>%
ggplot(.,aes(x=date_scraped, y = count, group = 1)) +
geom_line() +
theme_nycc() +
scale_x_discrete(breaks = function(x){x[c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)]})+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
source("code/00_load_dependencies.R")
indeed_df %>%
mutate(weekday_posted = day(strptime(date_scraped, "%m/%d/%Y %H:%M:%S")))
# Particular day most postings are done?
indeed_df %>%
mutate(weekday_posted = day(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>% View()
# Particular day most postings are done?
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>% View()
# Particular day most postings are done?
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE)) %>% View()
# Particular day most postings are done?
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE)) %>%
group_by(weekday_posted) %>%
summarise(count = n()) %>%
ggplot(.,aes(x=weekday_posted, y = count, group = 1)) +
geom_line() +
theme_nycc() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Particular day most postings are done?
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE)) %>%
group_by(weekday_posted) %>%
summarise(count = n()) %>%
ggplot(.,aes(x=weekday_posted, y = count, group = 1)) +
geom_line() +
geom_point() +
theme_nycc() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Particular day most postings are done?
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE)) %>%
group_by(weekday_posted) %>%
summarise(count = n()) %>%
ggplot(.,aes(x=weekday_posted, y = count, group = 1)) +
geom_bar() +
theme_nycc() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
line
# Particular day most postings are done?
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE)) %>%
group_by(weekday_posted) %>%
summarise(count = n()) %>%
ggplot(.,aes(x=weekday_posted, y = count, group = 1)) +
geom_line() +
geom_point() +
theme_nycc() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE)) %>%
group_by(weekday_posted) %>%
summarise(count = n())
# Particular hour most postings are done
indeed_df %>%
mutate(hour_posted = hour(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(hour_posted) %>%
summarise(count = n()) %>%
ggplot(.,aes(x=hour_posted, y = count, group = 1)) +
geom_line() +
geom_point() +
theme_nycc() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Particular day most postings are done normalized by week total
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>% View()
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(weekday_posted, week_posted) %>%
summarise(count = n())
# Particular day most postings are done normalized by week total
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(week_posted) %>%
summarise(count = n()) %>%
ggplot(.,aes(x=weekday_posted, y = count, group = 1)) +
geom_line() +
geom_point() +
theme_nycc() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(week_posted) %>%
summarise(count = n())
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(weekday_posted, week_posted) %>%
summarise(count = n())
# Particular day most postings are done normalized by week total
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(weekday_posted, week_posted) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(week_posted) %>%
mutate(week_total = sum(weekday_posted)) %>% View()
# Particular day most postings are done normalized by week total
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(weekday_posted, week_posted) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(week_posted) %>%
mutate(week_total = sum(count)) %>% View()
# Particular day most postings are done normalized by week total
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(weekday_posted, week_posted) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(week_posted) %>%
mutate(weekday_normalized = count/sum(count)) %>%
ggplot(.,aes(x=weekday_posted, y = weekday_normalized, group = 1)) +
geom_line() +
geom_point() +
theme_nycc() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Particular day most postings are done normalized by week total
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(weekday_posted, week_posted) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(week_posted) %>%
mutate(weekday_normalized = count/sum(count)) %>% View()
# Particular day most postings are done normalized by week total
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(weekday_posted, week_posted) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(week_posted) %>%
mutate(weekday_normalized = count/sum(count)) %>%
group_by(weekday_posted) %>%
summarise(wday_sum = sum(weekday_normalized)) %>%
ggplot(.,aes(x=weekday_posted, y = wday_sum, group = 1)) +
geom_line() +
geom_point() +
theme_nycc() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Particular day most postings are done normalized by week total
indeed_df %>%
mutate(weekday_posted = wday(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"),label = TRUE),
week_posted = week(strptime(date_scraped, "%m/%d/%Y %H:%M:%S"))) %>%
group_by(weekday_posted, week_posted) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(week_posted) %>%
mutate(weekday_normalized = count/sum(count)) %>% View()
salary_year_diff_1 %>%
distinct(.keep_all = TRUE) %>%
select(job_title, company_name, salary_snippet, salary_diff, salary_ratio) %>%
arrange(desc(salary_ratio)) %>%
gt() %>%
gt_theme_nytimes() %>%
tab_header(
title = "Indeed Jobs",
subtitle = glue::glue("With salary ranges greater than their lower bound")
) %>%
fmt_currency(columns = salary_diff) %>%
fmt_percent(columns = salary_ratio)
salary_year_diff_1 <- indeed_df %>%
filter(salary_ratio > 1,
salary_provided == 1)
salary_year_diff_1 %>%
distinct(.keep_all = TRUE) %>%
select(job_title, company_name, salary_snippet, salary_diff, salary_ratio) %>%
arrange(desc(salary_ratio)) %>%
gt() %>%
gt_theme_nytimes() %>%
tab_header(
title = "Indeed Jobs",
subtitle = glue::glue("With salary ranges greater than their lower bound")
) %>%
fmt_currency(columns = salary_diff) %>%
fmt_percent(columns = salary_ratio)
?grepl
salary_year_diff_1 <- indeed_df %>%
filter(salary_ratio > 1,
salary_provided == 1,
!grepl( job_titles_to_exclude, job_title, fixed = TRUE))
# What are these jobs that have high ratios?
job_titles_to_exclude = c("On-Site Healthcare Pre-Screening")
salary_year_diff_1 <- indeed_df %>%
filter(salary_ratio > 1,
salary_provided == 1,
!grepl( job_titles_to_exclude, job_title, fixed = TRUE))
salary_year_diff_1 %>%
distinct(.keep_all = TRUE) %>%
select(job_title, company_name, salary_snippet, salary_diff, salary_ratio) %>%
arrange(desc(salary_ratio)) %>%
gt() %>%
gt_theme_nytimes() %>%
tab_header(
title = "Indeed Jobs",
subtitle = glue::glue("With salary ranges greater than their lower bound")
) %>%
fmt_currency(columns = salary_diff) %>%
fmt_percent(columns = salary_ratio)
salary_year_diff_1 <- indeed_df %>%
filter(salary_ratio > 2,
salary_provided == 1,
!grepl( job_titles_to_exclude, job_title, fixed = TRUE))
salary_year_diff_1 %>%
distinct(.keep_all = TRUE) %>%
select(job_title, company_name, salary_snippet, salary_diff, salary_ratio) %>%
arrange(desc(salary_ratio)) %>%
gt() %>%
gt_theme_nytimes() %>%
tab_header(
title = "Indeed Jobs",
subtitle = glue::glue("With salary ranges greater than their lower bound")
) %>%
fmt_currency(columns = salary_diff) %>%
fmt_percent(columns = salary_ratio)
indeed_test_df <- read.csv("~/Desktop/Indeed_scrape_daily_compiliation.csv")
indeed_test_df <- read.csv("~/Desktop/Indeed_scrape_daily_compiliation.csv")
View(indeed_test_df)
test <- read.csv("~/Desktop/test.csv")
View(test)
test <- read.csv("~/Desktop/test.csv")
View(test)
test <- read.csv("~/Desktop/test.csv")
View(test)
bk_df <- read.csv("~/Desktop/Indeed_scrape_bk_compiliation.csv")
View(bk_df)
